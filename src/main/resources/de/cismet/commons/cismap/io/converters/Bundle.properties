BoundingBoxFromTextConverter.getFormatDisplayName().returnValue=Bounding Box from text converter
BoundingBoxFromTextConverter.getFormatDescription().returnValue=- Creates a rectangular polygon geometry\\n- Requires two coordinates\\n- Surplus coordinates are ignored\\n- Assumes first coordinate = lower-left corner\\n- Assumes second coordinate = upper-right corner\\n- Assumes 'easting<sep>northing<sep>easting<sep>...' pattern\\n- <sep> may be white-spaces (space, tab, enter, etc.), colons or semi-colons\\n- Numbers are parsed dependent on the language settings
BoundingBoxFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Creates a rectangular polygon geometry<br/>- Requires two coordinates<br/>- Surplus coordinates are ignored<br/>- Assumes first coordinate = lower-left corner<br/>- Assumes second coordinate = upper-right corner<br/>- Assumes 'easting&lt;sep&gt;northing&lt;sep&gt;easting&lt;sep&gt;...' pattern<br/>- &lt;sep&gt; may be white-spaces (space, tab, enter, etc.), colons or semi-colons<br/>- Numbers are parsed dependent on the language settings</html>
BoundingBoxFromTextConverter.getFormatExample().returnValue=<html>2581629.99 5683116<br/>2581706.999 5683180.99</html>
GeomFromWkbAsHexTextConverter.getFormatDisplayName().returnValue=Geometry from (E)WKB as hex text converter
GeomFromWkbAsHexTextConverter.getFormatDescription().returnValue=- Creates a geometry from (E)WKB\\n- Assumes WKB format as hex text\\n- Supports PostGIS EWKB format\\n- Uses SRID of EWKB instead of current one if data is EWKB
GeomFromWkbAsHexTextConverter.getFormatHtmlDescription().returnValue=<html>- Creates a geometry from (E)WKB<br/>- Assumes WKB format as hex text<br/>- Supports PostGIS EWKB format<br/>- Uses SRID of EWKB instead of current one if data is EWKB</html>
GeomFromWkbAsHexTextConverter.getFormatExample().returnValue=<html>0101000020cd0b000014ae47e17a14f23f0000000000000040</html>
GeomFromWktConverter.getFormatDisplayName().returnValue=Geometry from (E)WKT converter
GeomFromWktConverter.getFormatDescription().returnValue=- Creates a geometry from (E)WKT\\n- Assumes WKT format\\n- Supports PostGIS EWKT format\\n- Uses SRID of EWKT instead of current one if data is EWKT
GeomFromWktConverter.getFormatHtmlDescription().returnValue=<html>- Creates a geometry from (E)WKT<br/>- Assumes WKT format<br/>- Supports PostGIS EWKT format<br/>- Uses SRID of EWKT instead of current one if data is EWKT</html>
GeomFromWktConverter.getFormatExample().returnValue=<html>SRID=4269;POINT(-71.064544 42.28787)</html>
PointFromTextConverter.getFormatDisplayName().returnValue=Point from text converter
PointFromTextConverter.getFormatDescription().returnValue=- Creates a point geometry\\n- Requires one coordinate\\n- Surplus coordinates are ignored\\n- Assumes 'easting<sep>northing<sep>easting<sep>...' pattern\\n- <sep> may be white-spaces (space, tab, enter, etc.), colons or semi-colons\\n- Numbers are parsed dependent on the language settings
PointFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Creates a point geometry<br/>- Requires one coordinate<br/>- Surplus coordinates are ignored<br/>- Assumes 'easting&lt;sep&gt;northing&lt;sep&gt;easting&lt;sep&gt;...' pattern<br/>- &lt;sep&gt; may be white-spaces (space, tab, enter, etc.), colons or semi-colons<br/>- Numbers are parsed dependent on the language settings</html>
PointFromTextConverter.getFormatExample().returnValue=<html>2581629.99 5683116</html>
PolygonFromTextConverter.getFormatDisplayName().returnValue=Polygon from text converter
PolygonFromTextConverter.getFormatDescription().returnValue=- Creates a polygon geometry\\n- Requires at least three coordinates\\n- Adds closing coordinate if last coordinate does not match the first one\\n- Assumes 'easting<sep>northing<sep>easting<sep>...' pattern\\n- <sep> may be white-spaces (space, tab, enter, etc.), colons or semi-colons\\n- Numbers are parsed dependent on the language settings
PolygonFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Creates a polygon geometry<br/>- Requires at least three coordinates<br/>- Adds closing coordinate if last coordinate does not match the first one<br/>- Assumes 'easting&lt;sep&gt;northing&lt;sep&gt;easting&lt;sep&gt;...' pattern<br/>- &lt;sep&gt; may be white-spaces (space, tab, enter, etc.), colons or semi-colons<br/>- Numbers are parsed dependent on the language settings</html>
PolygonFromTextConverter.getFormatExample().returnValue=<html>2581629.99 5683116<br/>2581706.999 5683180.99<br/>2581780.9 5683220.99<br/>2581852 5683282.9<br/>2581629.99 5683116</html>
PolylineFromTextConverter.getFormatDisplayName().returnValue=Polyline from text converter
PolylineFromTextConverter.getFormatDescription().returnValue=- Creates a linestring geometry\\n- Requires at least two coordinates\\n- Assumes 'easting<sep>northing<sep>easting<sep>...' pattern\\n- <sep> may be white-spaces (space, tab, enter, etc.), colons or semi-colons\\n- Numbers are parsed dependent on the language settings
PolylineFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Creates a linestring geometry<br/>- Requires at least two coordinates<br/>- Assumes 'easting&lt;sep&gt;northing&lt;sep&gt;easting&lt;sep&gt;...' pattern<br/>- &lt;sep&gt; may be white-spaces (space, tab, enter, etc.), colons or semi-colons<br/>- Numbers are parsed dependent on the language settings</html>
PolylineFromTextConverter.getFormatExample().returnValue=<html>2581629.99 5683116<br/>2581706.999 5683180.99<br/>2581780.9 5683220.99<br/>2581852 5683282.9<br/>2581793.0 5683366.7</html>
