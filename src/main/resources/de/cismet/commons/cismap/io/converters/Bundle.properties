BoundingBoxFromTextConverter.getFormatDisplayName().returnValue=Rectangle from 2 coordinates
BoundingBoxFromTextConverter.getFormatDescription().returnValue=- Creates a rectangular polygon geometry\\n- Requires two coordinates\\n- Surplus coordinates are ignored\\n- Assumes first coordinate = lower-left corner\\n- Assumes second coordinate = upper-right corner
BoundingBoxFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Creates a rectangular polygon geometry<br/>- Requires two coordinates<br/>- Surplus coordinates are ignored<br/>- Assumes first coordinate = lower-left corner<br/>- Assumes second coordinate = upper-right corner</html>
BoundingBoxFromTextConverter.getFormatExample().returnValue=<html>2581629{0}99 5683116<br/>2581706{0}999 5683180{0}99</html>
GeomFromWkbAsHexTextConverter.getFormatDisplayName().returnValue=Geometry from (E)WKB-Format
GeomFromWkbAsHexTextConverter.getFormatDescription().returnValue=- Creates a geometry from (E)WKB\\n- Assumes WKB format as hex text\\n- Supports PostGIS EWKB format\\n- Uses SRID of EWKB instead of current one if data is EWKB
GeomFromWkbAsHexTextConverter.getFormatHtmlDescription().returnValue=<html>- Creates a geometry from (E)WKB<br/>- Assumes WKB format as hex text<br/>- Supports PostGIS EWKB format<br/>- Uses SRID of EWKB instead of current one if data is EWKB</html>
GeomFromWkbAsHexTextConverter.getFormatExample().returnValue=<html>0101000020cd0b000014ae47e17a14f23f0000000000000040</html>
GeomFromWktConverter.getFormatDisplayName().returnValue=Geometry from (E)WKT-Format
GeomFromWktConverter.getFormatDescription().returnValue=- Creates a geometry from (E)WKT\\n- Assumes WKT format\\n- Supports PostGIS EWKT format\\n- Uses SRID of EWKT instead of current one if data is EWKT
GeomFromWktConverter.getFormatHtmlDescription().returnValue=<html>- Creates a geometry from (E)WKT<br/>- Assumes WKT format<br/>- Supports PostGIS EWKT format<br/>- Uses SRID of EWKT instead of current one if data is EWKT</html>
GeomFromWktConverter.getFormatExample().returnValue=<html>SRID=4269;POINT(-71.064544 42.28787)</html>
PointFromTextConverter.getFormatDisplayName().returnValue=Point from one coordinate
PointFromTextConverter.getFormatDescription().returnValue=- Creates a point geometry\\n- Requires one coordinate\\n- Surplus coordinates are ignored
PointFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Creates a point geometry<br/>- Requires one coordinate<br/>- Surplus coordinates are ignored</html>
PointFromTextConverter.getFormatExample().returnValue=<html>2581629{0}99 5683116</html>
PolygonFromTextConverter.getFormatDisplayName().returnValue=Area from at least 3 coordinates
PolygonFromTextConverter.getFormatDescription().returnValue=- Creates a polygon geometry\\n- Requires at least three coordinates\\n- Adds closing coordinate if last coordinate does not match the first one
PolygonFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Creates a polygon geometry<br/>- Requires at least three coordinates<br/>- Adds closing coordinate if last coordinate does not match the first one</html>
PolygonFromTextConverter.getFormatExample().returnValue=<html>2581629{0}99 5683116<br/>2581706{0}999 5683180{0}99<br/>2581780{0}9 5683220{0}99<br/>2581852 5683282{0}9<br/>2581629{0}99 5683116</html>
PolylineFromTextConverter.getFormatDisplayName().returnValue=Polyline from at least 2 coordinates
PolylineFromTextConverter.getFormatDescription().returnValue=- Creates a linestring geometry\\n- Requires at least two coordinates
PolylineFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Creates a linestring geometry<br/>- Requires at least two coordinates</html>
PolylineFromTextConverter.getFormatExample().returnValue=<html>2581629{0}99 5683116<br/>2581706{0}999 5683180{0}99<br/>2581780{0}9 5683220{0}99<br/>2581852 5683282{0}9<br/>2581793{0}0 5683366{0}7</html>
AbstractGeometryFromTextConverter.getFormatDescription().returnValue=- Assumes 'easting<sep>northing<sep>easting<sep>...' pattern\\n- <sep> may be white-spaces (space, tab, enter, etc.), {0}\\n- Numbers are parsed using ''{1}'' as decimal separator
AbstractGeometryFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Assumes 'easting&lt;sep&gt;northing&lt;sep&gt;easting&lt;sep&gt;...' pattern<br/>- &lt;sep&gt; may be white-spaces (space, tab, enter, etc.), {0}<br/>- Numbers are parsed using ''{1}'' as decimal separator</html>
AbstractGeometryFromTextConverter.getFormatSeparators().or=\ or
