BoundingBoxFromTextConverter.getFormatDisplayName().returnValue=Bounding Box aus Text Konverter
BoundingBoxFromTextConverter.getFormatDescription().returnValue=- Erzeugt eine rechteckige Polygon-Geometrie\\n- Ben\u00f6tigt zwei Koordinaten\\n- \u00dcberz\u00e4hlige Koordinate werden ignoriert\\n- Setzt erste Koordinate = linke-untere Ecke voraus\\n- Setzt zweite Koordinate = rechte-obere Ecke voraus\\n- Setzt 'Rechtswert&lt;sep&gt;Hochwert&lt;sep&gt;Rechtswert&lt;sep&gt;...' Schema voraus\\n- &lt;sep&gt; darf Trennzeichen (Leerzeichen, Tabulator, Enter, etc.), Doppelpunkt oder Strichpunkt sein\\n- Zahlen werden entsprechend der L\u00e4ndereinstellung interpretiert
BoundingBoxFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Erzeugt eine rechteckige Polygon-Geometrie<br/>- Ben\u00f6tigt zwei Koordinaten<br/>- \u00dcberz\u00e4hlige Koordinate werden ignoriert<br/>- Setzt erste Koordinate = linke-untere Ecke voraus<br/>- Setzt zweite Koordinate = rechte-obere Ecke voraus<br/>- Setzt 'Rechtswert&lt;sep&gt;Hochwert&lt;sep&gt;Rechtswert&lt;sep&gt;...' Schema voraus<br/>- &lt;sep&gt; darf Trennzeichen (Leerzeichen, Tabulator, Enter, etc.), Doppelpunkt oder Strichpunkt sein<br/>- Zahlen werden entsprechend der L\u00e4ndereinstellung interpretiert</html>
BoundingBoxFromTextConverter.getFormatExample().returnValue=<html>2581629,99 5683116<br/>2581706,999 5683180,99</html>
GeomFromWkbAsHexTextConverter.getFormatDisplayName().returnValue=Geometrie aus (E)WKB als Hex-Text Konverter
GeomFromWkbAsHexTextConverter.getFormatDescription().returnValue=- Erzeugt eine Geometrie aus (E)WKB\\n- Setzt WKB Format als Hex-Text voraus\\n- Unterst\u00fctzt PostGIS EWKB Format\\n- Benutzt SRID des EWKB anstelle des ausgew\u00e4hlten, wenn Daten EWKB sind
GeomFromWkbAsHexTextConverter.getFormatHtmlDescription().returnValue=<html>- Erzeugt eine Geometrie aus (E)WKB<br/>- Setzt WKB Format als Hex-Text voraus<br/>- Unterst\u00fctzt PostGIS EWKB Format<br/>- Benutzt SRID des EWKB anstelle des ausgew\u00e4hlten, wenn Daten EWKB sind</html>
GeomFromWkbAsHexTextConverter.getFormatExample().returnValue=<html>0101000020cd0b000014ae47e17a14f23f0000000000000040</html>
GeomFromWktConverter.getFormatDisplayName().returnValue=Geometrie aus (E)WKT Konverter
GeomFromWktConverter.getFormatDescription().returnValue=- Erzeugt eine Geometrie aus (E)WKT\\n- Setzt WKT Format voraus\\n- Unterst\u00fctzt PostGIS EWKT Format\\n- Benutzt SRID des EWKT anstelle des ausgew\u00e4hlten, wenn Daten EWKT sind
GeomFromWktConverter.getFormatHtmlDescription().returnValue=<html>- Erzeugt eine Geometrie aus (E)WKT<br/>- Setzt WKT Format voraus<br/>- Unterst\u00fctzt PostGIS EWKT Format<br/>- Benutzt SRID des EWKT anstelle des ausgew\u00e4hlten, wenn Daten EWKT sind</html>
GeomFromWktConverter.getFormatExample().returnValue=<html>SRID=4269;POINT(-71.064544 42.28787)</html>
PointFromTextConverter.getFormatDisplayName().returnValue=Punkt aus Text Konverter
PointFromTextConverter.getFormatDescription().returnValue=- Erzeugt eine Punkt-Geometrie\\n- Ben\u00f6tigt eine Koordinate\\n- \u00dcberz\u00e4hlige Koordinate werden ignoriert\\n- Setzt 'Rechtswert&lt;sep&gt;Hochwert&lt;sep&gt;Rechtswert&lt;sep&gt;...' Schema voraus\\n- &lt;sep&gt; darf Trennzeichen (Leerzeichen, Tabulator, Enter, etc.), Doppelpunkt oder Strichpunkt sein\\n- Zahlen werden entsprechend der L\u00e4ndereinstellung interpretiert
PointFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Erzeugt eine Punkt-Geometrie<br/>- Ben\u00f6tigt eine Koordinate<br/>- \u00dcberz\u00e4hlige Koordinate werden ignoriert<br/>- Setzt 'Rechtswert&lt;sep&gt;Hochwert&lt;sep&gt;Rechtswert&lt;sep&gt;...' Schema voraus<br/>- &lt;sep&gt; darf Trennzeichen (Leerzeichen, Tabulator, Enter, etc.), Doppelpunkt oder Strichpunkt sein<br/>- Zahlen werden entsprechend der L\u00e4ndereinstellung interpretiert</html>
PointFromTextConverter.getFormatExample().returnValue=<html>2581629,99 5683116</html>
PolygonFromTextConverter.getFormatDisplayName().returnValue=Polygon aus Text Konverter
PolygonFromTextConverter.getFormatDescription().returnValue=- Erzeugt eine Polygon-Geometrie\\n- Ben\u00f6tigt mindestens drei Koordinaten\\n- F\u00fcgt schlie\u00dfende Koordinate hinzu, wenn letzte Koordinate nicht der ersten entspricht\\n- Setzt 'Rechtswert&lt;sep&gt;Hochwert&lt;sep&gt;Rechtswert&lt;sep&gt;...' Schema voraus\\n- &lt;sep&gt; darf Trennzeichen (Leerzeichen, Tabulator, Enter, etc.), Doppelpunkt oder Strichpunkt sein\\n- Zahlen werden entsprechend der L\u00e4ndereinstellung interpretiert
PolygonFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Erzeugt eine Polygon-Geometrie<br/>- Ben\u00f6tigt mindestens drei Koordinaten<br/>- F\u00fcgt schlie\u00dfende Koordinate hinzu, wenn letzte Koordinate nicht der ersten entspricht<br/>- Setzt 'Rechtswert&lt;sep&gt;Hochwert&lt;sep&gt;Rechtswert&lt;sep&gt;...' Schema voraus<br/>- &lt;sep&gt; darf Trennzeichen (Leerzeichen, Tabulator, Enter, etc.), Doppelpunkt oder Strichpunkt sein<br/>- Zahlen werden entsprechend der L\u00e4ndereinstellung interpretiert</html>
PolygonFromTextConverter.getFormatExample().returnValue=<html>2581629,99 5683116<br/>2581706,999 5683180,99<br/>2581780,9 5683220,99<br/>2581852 5683282,9<br/>2581629,99 5683116</html>
PolylineFromTextConverter.getFormatDisplayName().returnValue=Polylinie aus Text Konverter
PolylineFromTextConverter.getFormatDescription().returnValue=- Erzeugt eine Linestring-Geometrie\\n- Ben\u00f6tigt mindestens zwei Koordinaten\\n- Setzt 'Rechtswert&lt;sep&gt;Hochwert&lt;sep&gt;Rechtswert&lt;sep&gt;...' Schema voraus\\n- &lt;sep&gt; darf Trennzeichen (Leerzeichen, Tabulator, Enter, etc.), Doppelpunkt oder Strichpunkt sein\\n- Zahlen werden entsprechend der L\u00e4ndereinstellung interpretiert
PolylineFromTextConverter.getFormatHtmlDescription().returnValue=<html>- Erzeugt eine Linestring-Geometrie<br/>- Ben\u00f6tigt mindestens zwei Koordinaten<br/>- Setzt 'Rechtswert&lt;sep&gt;Hochwert&lt;sep&gt;Rechtswert&lt;sep&gt;...' Schema voraus<br/>- &lt;sep&gt; darf Trennzeichen (Leerzeichen, Tabulator, Enter, etc.), Doppelpunkt oder Strichpunkt sein<br/>- Zahlen werden entsprechend der L\u00e4ndereinstellung interpretiert</html>
PolylineFromTextConverter.getFormatExample().returnValue=<html>2581629,99 5683116<br/>2581706,999 5683180,99<br/>2581780,9 5683220,99<br/>2581852 5683282,9<br/>2581793,0 5683366,7</html>
