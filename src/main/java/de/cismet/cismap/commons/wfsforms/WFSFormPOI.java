/*
 * WFSFormTester.java
 *
 * Created on 25. Juli 2006, 17:38
 */
package de.cismet.cismap.commons.wfsforms;

import com.jgoodies.looks.plastic.PlasticXPLookAndFeel;
import de.cismet.cismap.commons.BoundingBox;
import de.cismet.cismap.commons.gui.MappingComponent;
import de.cismet.cismap.commons.interaction.CismapBroker;
import de.cismet.tools.gui.log4jquickconfig.Log4JQuickConfig;
import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ResourceBundle;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author  thorsten.hell@cismet.de
 */
public class WFSFormPOI extends AbstractWFSForm {
    private static final ResourceBundle I18N = ResourceBundle.getBundle("de/cismet/cismap/commons/GuiBundle");

    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    private WFSFormFeature locationtype = null;
    private WFSFormFeature poi = null;

    /** Creates new form WFSFormTester */
    public WFSFormPOI() {
        log.debug("new WFSFormPOI");
        try {
            initComponents();
//        cboStreets.setEditable(true);
//        cboNr.setEditable(true);


            AutoCompleteDecorator.decorate(cboLocationtypes);
            AutoCompleteDecorator.decorate(cboPois);
            prbLocationtypes.setPreferredSize(new java.awt.Dimension(1, 5));
            prbPois.setPreferredSize(new java.awt.Dimension(1, 5));

            listComponents.put("cboAllLocationtypes", cboLocationtypes);
            listComponents.put("cboAllLocationtypesProgress", prbLocationtypes);
            listComponents.put("cboPoisOfALocationtype", cboPois);
            listComponents.put("cboPoisOfALocationtypeProgress", prbPois);

            JTextField poiEditor = (JTextField) cboPois.getEditor().getEditorComponent();
            poiEditor.getDocument().addDocumentListener(new DocumentListener() {

                public void insertUpdate(DocumentEvent e) {
                    log.fatal(cboPois.getSelectedIndex());
                    checkCboCorrectness(cboPois);
                }

                public void removeUpdate(DocumentEvent e) {
                    checkCboCorrectness(cboPois);
                }

                public void changedUpdate(DocumentEvent e) {
                    checkCboCorrectness(cboPois);
                }
            });
            //CismapBroker.getInstance().getMappingComponent().getHighlightingLayer().addChild(pMark);
        } catch (Exception e) {
            log.error("Could not Create WFForm", e);
        }
    }
    public void garbageDuringAutoCompletion(JComboBox box){
        poi=null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        cmdOk = new javax.swing.JButton();
        panPOIs = new javax.swing.JPanel();
        cboPois = new javax.swing.JComboBox();
        prbPois = new javax.swing.JProgressBar();
        panLT = new javax.swing.JPanel();
        cboLocationtypes = new javax.swing.JComboBox();
        prbLocationtypes = new javax.swing.JProgressBar();
        chkVisualize = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        chkLockScale = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        setMinimumSize(new java.awt.Dimension(373, 1));
        setLayout(new java.awt.GridBagLayout());

        cmdOk.setMnemonic('P');
        cmdOk.setText(I18N.getString("de.cismet.cismap.commons.wfsforms.WFSFormPOI.cmdOk.text")); // NOI18N
        cmdOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        add(cmdOk, gridBagConstraints);

        panPOIs.setMinimumSize(new java.awt.Dimension(183, 24));
        panPOIs.setLayout(new java.awt.GridBagLayout());

        cboPois.setEditable(true);
        cboPois.setEnabled(false);
        cboPois.setMaximumSize(new java.awt.Dimension(32767, 19));
        cboPois.setMinimumSize(new java.awt.Dimension(10, 18));
        cboPois.setPreferredSize(new java.awt.Dimension(180, 19));
        cboPois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboPoisActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 30.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        panPOIs.add(cboPois, gridBagConstraints);

        prbPois.setBorderPainted(false);
        prbPois.setMaximumSize(new java.awt.Dimension(32767, 5));
        prbPois.setMinimumSize(new java.awt.Dimension(10, 5));
        prbPois.setPreferredSize(new java.awt.Dimension(100, 5));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 10);
        panPOIs.add(prbPois, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        add(panPOIs, gridBagConstraints);

        panLT.setMinimumSize(new java.awt.Dimension(180, 24));
        panLT.setLayout(new java.awt.GridBagLayout());

        cboLocationtypes.setEnabled(false);
        cboLocationtypes.setMaximumSize(new java.awt.Dimension(32767, 19));
        cboLocationtypes.setPreferredSize(new java.awt.Dimension(180, 19));
        cboLocationtypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLocationtypesActionPerformed(evt);
            }
        });
        cboLocationtypes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cboLocationtypesKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 70.0;
        panLT.add(cboLocationtypes, gridBagConstraints);

        prbLocationtypes.setBorderPainted(false);
        prbLocationtypes.setMaximumSize(new java.awt.Dimension(32767, 5));
        prbLocationtypes.setMinimumSize(new java.awt.Dimension(10, 5));
        prbLocationtypes.setPreferredSize(new java.awt.Dimension(100, 5));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 9);
        panLT.add(prbLocationtypes, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        add(panLT, gridBagConstraints);

        chkVisualize.setSelected(true);
        chkVisualize.setToolTipText(I18N.getString("de.cismet.cismap.commons.wfsforms.WFSFormPOI.chkVisualize.toolTipText")); // NOI18N
        chkVisualize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkVisualizeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 7, 0, 0);
        add(chkVisualize, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cismap/commons/gui/res/markPoint.png"))); // NOI18N
        jLabel1.setToolTipText(I18N.getString("de.cismet.cismap.commons.wfsforms.WFSFormPOI.jLabel1.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 7, 0, 0);
        add(jLabel1, gridBagConstraints);

        chkLockScale.setSelected(true);
        chkLockScale.setToolTipText(I18N.getString("de.cismet.cismap.commons.wfsforms.WFSFormPOI.chkLockScale.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 14, 0, 0);
        add(chkLockScale, gridBagConstraints);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cismap/commons/gui/res/fixMapScale.png"))); // NOI18N
        jLabel2.setToolTipText(I18N.getString("de.cismet.cismap.commons.wfsforms.WFSFormPOI.jLabel2.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 7, 0, 0);
        add(jLabel2, gridBagConstraints);

        jPanel1.setMinimumSize(new java.awt.Dimension(1, 1));
        jPanel1.setPreferredSize(new java.awt.Dimension(1, 1));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 18, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 31, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void chkVisualizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkVisualizeActionPerformed
        MappingComponent mc = getMappingComponent();
        if (mc == null) {
            mc = CismapBroker.getInstance().getMappingComponent();
        }

        if (!mc.getHighlightingLayer().getChildrenReference().contains(pMark)) {
            mc.getHighlightingLayer().addChild(pMark);
        }
        if (poi != null) {
            visualizePosition(poi, chkVisualize.isSelected());
        }
    }//GEN-LAST:event_chkVisualizeActionPerformed

    private void cboLocationtypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLocationtypesActionPerformed
        log.debug("cboStreetsActionPerformed()");
        if (cboLocationtypes.getSelectedItem() instanceof WFSFormFeature) {
            locationtype = (WFSFormFeature) cboLocationtypes.getSelectedItem();
            poi = null;
            requestRefresh("cboPoisOfALocationtype", (WFSFormFeature) cboLocationtypes.getSelectedItem());
        }
    }//GEN-LAST:event_cboLocationtypesActionPerformed

    private void cboLocationtypesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboLocationtypesKeyTyped
    }//GEN-LAST:event_cboLocationtypesKeyTyped

    private void cmdOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOkActionPerformed
        boolean history = true;
        MappingComponent mc = getMappingComponent();
        if (mc == null) {
            mc = CismapBroker.getInstance().getMappingComponent();
        }
        boolean scaling = !(mc.isFixedMapScale()) && !(chkLockScale.isSelected());
        BoundingBox bb = null;
        int animation = mc.getAnimationDuration();
        if (poi != null) {
            if (scaling) {
                bb = new BoundingBox(poi.getJTSGeometry());
            } else {
                bb = new BoundingBox(poi.getPosition().buffer(AbstractWFSForm.FEATURE_BORDER));
            }
        } else {
            return;
        }
        mc.gotoBoundingBox(bb, history, scaling, animation);
        chkVisualizeActionPerformed(null);
    }//GEN-LAST:event_cmdOkActionPerformed

    private void cboPoisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboPoisActionPerformed
        log.debug("cboPoisActionPerformed()");
        if (cboPois.getSelectedItem() instanceof WFSFormFeature) {
            poi = (WFSFormFeature) cboPois.getSelectedItem();
        }
    }//GEN-LAST:event_cboPoisActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboLocationtypes;
    private javax.swing.JComboBox cboPois;
    private javax.swing.JCheckBox chkLockScale;
    private javax.swing.JCheckBox chkVisualize;
    private javax.swing.JButton cmdOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panLT;
    private javax.swing.JPanel panPOIs;
    private javax.swing.JProgressBar prbLocationtypes;
    private javax.swing.JProgressBar prbPois;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) throws Exception {

        try {
            //javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()) ;
            //javax.swing.UIManager.setLookAndFeel(new Plastic3DLookAndFeel());
            //javax.swing.UIManager.setLookAndFeel(new PlasticLookAndFeel());
            javax.swing.UIManager.setLookAndFeel(new PlasticXPLookAndFeel());
            //javax.swing.UIManager.setLookAndFeel(new com.sun.java.swing.plaf.windows.WindowsLookAndFeel());
            // UIManager.setLookAndFeel(new PlasticLookAndFeel());
            //javax.swing.UIManager.setLookAndFeel(new PlasticXPLookAndFeel());
        } catch (Exception e) {
            e.printStackTrace();
        }
        WFSFormQuery allStreets = new WFSFormQuery();
        allStreets.setComponentName("cboAllStreets");
        allStreets.setServerUrl("http://s103bdc-a1/deegreewfs/wfs");
        allStreets.setDisplayTextProperty("geographicIdentifier");
        allStreets.setExtentProperty("geographicExtent");
        allStreets.setFilename("/request_all_streets.xml");
        allStreets.setId("all_streets");
        allStreets.setIdProperty("identifier");
        allStreets.setTitle("Strassen");
        allStreets.setType(WFSFormQuery.INITIAL);
        allStreets.setWfsQueryString(readFileAsString(new File("C:\\request_alle_strassen_extent.xml")));

        WFSFormQuery numbers = new WFSFormQuery();
        numbers.setComponentName("cboNumbersOfAStreet");
        numbers.setServerUrl("http://s103bdc-a1/deegreewfs/wfs");
        numbers.setDisplayTextProperty("geographicIdentifier");
        numbers.setExtentProperty("geographicExtent");
        numbers.setFilename("/request_all_numbers.xml");
        numbers.setId("numbers");
        numbers.setIdProperty("identifier");
        numbers.setTitle("Nr");
        numbers.setType(WFSFormQuery.FOLLOWUP);
        numbers.setQueryPlaceholder("@@strasse_id@@");
        numbers.setWfsQueryString(readFileAsString(new File("C:\\request_hausnummern_from_strasse_extent.xml")));
        Vector<WFSFormQuery> v = new Vector<WFSFormQuery>();
        v.add(allStreets);
        v.add(numbers);

        final WFSFormAdress tester = new WFSFormAdress();
        tester.setQueries(v);
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JFrame f = new JFrame();
                f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                f.getContentPane().setLayout(new BorderLayout());
                f.getContentPane().add(tester, BorderLayout.CENTER);
                f.setVisible(true);
                f.setSize(365, 65);
            }
        });

    }

    private static String readFileAsString(File file) throws java.io.IOException {
        Log4JQuickConfig.configure4LumbermillOnLocalhost();
        StringBuffer fileData = new StringBuffer(1000);
        BufferedReader reader = new BufferedReader(
                new FileReader(file));
        char[] buf = new char[1024];
        int numRead = 0;
        while ((numRead = reader.read(buf)) != -1) {
            String readData = String.valueOf(buf, 0, numRead);
            fileData.append(readData);
            buf = new char[1024];
        }
        reader.close();
        return fileData.toString();
    }
}
