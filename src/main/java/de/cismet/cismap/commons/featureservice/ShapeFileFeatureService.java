/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cismap.commons.featureservice;

import de.cismet.cismap.commons.features.ShapeFeature;
import de.cismet.cismap.commons.featureservice.factory.FeatureFactory;
import de.cismet.cismap.commons.featureservice.factory.ShapeFeatureFactory;
import de.cismet.tools.collections.TypeSafeCollections;
import java.net.URI;
import java.util.Map;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.jdom.Element;

/**
 *
 * @author spuhl
 */
//Todo optimieren wann welche Features geladen werden z.B. bei 150 MB file
public class ShapeFileFeatureService extends DocumentFeatureService<ShapeFeature, String>
{
  //public final static String SHAPE_FEATURELAYER_TYPE = "ShapeFileFeatureServiceLayer";
  public static final Map<Integer, Icon> layerIcons = TypeSafeCollections.newHashMap();
  public static final String SHAPE_FEATURELAYER_TYPE = "ShapeFeatureServiceLayer";//NOI18N

  static
  {
    layerIcons.put(LAYER_ENABLED_VISIBLE, new ImageIcon(AbstractFeatureService.class.getResource("/de/cismet/cismap/commons/gui/layerwidget/res/layerShape.png")));//NOI18N
    layerIcons.put(LAYER_ENABLED_INVISIBLE, new ImageIcon(AbstractFeatureService.class.getResource("/de/cismet/cismap/commons/gui/layerwidget/res/layerShapeInvisible.png")));//NOI18N
    layerIcons.put(LAYER_DISABLED_VISIBLE, new ImageIcon(AbstractFeatureService.class.getResource("/de/cismet/cismap/commons/gui/layerwidget/res/disabled/layerShape.png")));//NOI18N
    layerIcons.put(LAYER_DISABLED_INVISIBLE, new ImageIcon(AbstractFeatureService.class.getResource("/de/cismet/cismap/commons/gui/layerwidget/res/disabled/layerShapeInvisible.png")));//NOI18N
  }

  public ShapeFileFeatureService(String name, URI documentURI, long documentSize, Vector<FeatureServiceAttribute> attributes) throws Exception
  {
    super(name, documentURI, documentSize, attributes);
    this.maxFeatureCount = 5000;
  }

  protected ShapeFileFeatureService(ShapeFileFeatureService sfs)
  {
    super(sfs);
  }

  public ShapeFileFeatureService(Element e) throws Exception
  {
    super(e);
  }

  @Override
  public Icon getLayerIcon(int type)
  {
    return layerIcons.get(type);
  }

  @Override
  protected LayerProperties createLayerProperties()
  {
    
    DefaultLayerProperties defaultLayerProperties = new DefaultLayerProperties();
    //defaultLayerProperties.setIdExpression("app:ID", LayerProperties.EXPRESSIONTYPE_PROPERTYNAME);
    //IDs of documents can be autogenerated (faster)!
    defaultLayerProperties.setIdExpression(null, LayerProperties.EXPRESSIONTYPE_UNDEFINED);
    return defaultLayerProperties;
  }

  @Override
  protected FeatureFactory createFeatureFactory() throws Exception
  {
    return new ShapeFeatureFactory(this.getLayerProperties(), this.getDocumentURI(), this.maxSupportedFeatureCount, this.layerInitWorker);
  }

  @Override
  public String getQuery()
  {
    //logger.warn("unexpected call to getQuery, not supported by this service");
    return null;
  }

  @Override
  public void setQuery(String query)
  {
    logger.warn("unexpected call to setQuery, not supported by this service:\n" + query);//NOI18N
  }

  @Override
  protected void initConcreteInstance() throws Exception
  {
    // nothing to do here
  }

  @Override
  public void setDocumentURI(URI documentURI)
  {
    super.setDocumentURI(documentURI);
    if(this.getFeatureFactory() != null)
    {
      ((ShapeFeatureFactory)this.getFeatureFactory()).setDocumentURI(documentURI);
    }
  }

  @Override
  protected String getFeatureLayerType()
  {
    return SHAPE_FEATURELAYER_TYPE;
  }

  @Override
  public Object clone()
  {
    logger.info("cloning service "+this.getName());//NOI18N
    return new ShapeFileFeatureService(this);
  }

// breaks DocumentFeatureServiceFactory
//  @Override
//  protected String getFeatureLayerType()
//  {
//    return SHAPE_FEATURELAYER_TYPE;
//  }
}
