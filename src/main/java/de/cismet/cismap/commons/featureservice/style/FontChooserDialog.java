/*
 * FontChooserDialog.java
 *
 * Created on 5. M\u00E4rz 2008, 09:17
 */

package de.cismet.cismap.commons.featureservice.style;

import de.cismet.tools.CismetThreadPool;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.RenderingHints;
import java.util.ResourceBundle;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 *
 * @author  nh
 */
public class FontChooserDialog extends JDialog {
    private static final ResourceBundle I18N = ResourceBundle.getBundle("de/cismet/cismap/commons/GuiBundle");
    /** Display text */
    private static final String SAMPLE_TEXT = I18N.getString("de.cismet.cismap.commons.featureservice.style.FontChooserDialog.SAMPLE_TEXT");
    /** Selected index of the default fontsize */
    private static final int DEFAULT_SIZE = 4;
    /** The font the user has chosen */
    private Font resultFont;
    /** The resulting font name */
    private String resultName;
    /** The resulting font size */
    private int resultSize;
    /** The resulting boldness */
    private boolean isBold;
    /** The resulting italicness */
    private boolean isItalic;
    
    /** Creates new form FontChooserDialog */
    public FontChooserDialog(JDialog parent, String title) {
        super(parent, title, true);
        initComponents();
        setLocationRelativeTo(parent);
    }
    
    /** Creates new form FontChooserDialog */
    public FontChooserDialog(JFrame parent) {
        super(parent, true);
        initComponents();
        setLocationRelativeTo(parent);
    }
    
    /**
     * Called from the action handlers to get the font info, build a font, and
     * set it.
     */
    protected void previewFont() {
        Runnable t = new Runnable() {
            public void run() {
                resultName = (String) lstFontName.getSelectedValue();
                String resultSizeName = (String) lstFontSize.getSelectedValue();
                int size = Integer.parseInt(resultSizeName);
                isItalic = chkItalic.isSelected();
                isBold = chkBold.isSelected();
                int attrs = Font.PLAIN;
                if (isBold) {
                    attrs = Font.BOLD;
                }
                if (isItalic) {
                    attrs |= Font.ITALIC;
                }
                resultFont = new Font(resultName, attrs, size);
                EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        lblPreview.setFont(resultFont);
                    }
                });
            }
        };
        CismetThreadPool.execute(t);
    }

    /** Retrieve the selected font name. */
    public String getSelectedName() {
        return resultName;
    }

    /** Retrieve the selected size */
    public int getSelectedSize() {
        return resultSize;
    }
    
    /** Returns the new Font */
    public Font getReturnStatus() {
        return resultFont;
    }
    
    /** Selects the given font if available, the given size and style */
    public void setSelectedFont(Font font, int size, boolean bold, boolean italic) {
        lstFontName.setSelectedValue(font.getName(), true);
        lstFontSize.setSelectedValue(new Integer(size).toString(), true);
        chkBold.setSelected(bold);
        chkItalic.setSelected(italic);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panFontAttrib = new javax.swing.JPanel();
        scrFontName = new javax.swing.JScrollPane();
        lstFontName = new JList(GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames());
        scrFontSize = new javax.swing.JScrollPane();
        lstFontSize = new javax.swing.JList();
        chkBold = new javax.swing.JCheckBox();
        chkItalic = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panPreview = new javax.swing.JPanel();
        scrPreview = new javax.swing.JScrollPane();
        panPreviewLabel = new javax.swing.JPanel();
        lblPreview = new JLabel(SAMPLE_TEXT, JLabel.CENTER) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                super.paintComponent(g2d);
            }
        };
        ;
        panDialogButtons = new javax.swing.JPanel();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        panFontAttrib.setLayout(new java.awt.GridBagLayout());

        scrFontName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrFontName.setMinimumSize(new java.awt.Dimension(200, 130));
        scrFontName.setPreferredSize(new java.awt.Dimension(200, 130));

        lstFontName.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstFontName.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstFontNameValueChanged(evt);
            }
        });
        scrFontName.setViewportView(lstFontName);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        panFontAttrib.add(scrFontName, gridBagConstraints);

        scrFontSize.setMinimumSize(new java.awt.Dimension(50, 130));
        scrFontSize.setPreferredSize(new java.awt.Dimension(50, 130));

        lstFontSize.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "8", "9", "10", "11", "12", "14", "16", "18", "20", "24", "30", "36", "48", "60", "72" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstFontSize.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstFontSize.setSelectedIndex(DEFAULT_SIZE);
        lstFontSize.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstFontSizeValueChanged(evt);
            }
        });
        scrFontSize.setViewportView(lstFontSize);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 10);
        panFontAttrib.add(scrFontSize, gridBagConstraints);

        chkBold.setText(I18N.getString("de.cismet.cismap.commons.featureservice.style.FontChooserDialog.chkBold.text")); // NOI18N
        chkBold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkBoldItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        panFontAttrib.add(chkBold, gridBagConstraints);

        chkItalic.setText(I18N.getString("de.cismet.cismap.commons.featureservice.style.FontChooserDialog.chkItalic.text")); // NOI18N
        chkItalic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkItalicItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        panFontAttrib.add(chkItalic, gridBagConstraints);

        jLabel1.setLabelFor(lstFontName);
        jLabel1.setText(I18N.getString("de.cismet.cismap.commons.featureservice.style.FontChooserDialog.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 10);
        panFontAttrib.add(jLabel1, gridBagConstraints);

        jLabel2.setLabelFor(lstFontSize);
        jLabel2.setText(I18N.getString("de.cismet.cismap.commons.featureservice.style.FontChooserDialog.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        panFontAttrib.add(jLabel2, gridBagConstraints);

        getContentPane().add(panFontAttrib, java.awt.BorderLayout.NORTH);

        panPreview.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 5, 5, 5));
        panPreview.setMinimumSize(new java.awt.Dimension(400, 100));
        panPreview.setPreferredSize(new java.awt.Dimension(400, 100));
        panPreview.setLayout(new java.awt.BorderLayout());

        scrPreview.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrPreview.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        panPreviewLabel.setBackground(new java.awt.Color(255, 255, 255));
        panPreviewLabel.setLayout(new java.awt.GridBagLayout());
        panPreviewLabel.add(lblPreview, new java.awt.GridBagConstraints());

        scrPreview.setViewportView(panPreviewLabel);

        panPreview.add(scrPreview, java.awt.BorderLayout.CENTER);

        getContentPane().add(panPreview, java.awt.BorderLayout.CENTER);

        panDialogButtons.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 5, 0));
        panDialogButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        cmdOK.setText(I18N.getString("de.cismet.cismap.commons.featureservice.style.FontChooserDialog.cmdOK.text")); // NOI18N
        cmdOK.setMaximumSize(new java.awt.Dimension(90, 23));
        cmdOK.setMinimumSize(new java.awt.Dimension(90, 23));
        cmdOK.setPreferredSize(new java.awt.Dimension(90, 23));
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });
        panDialogButtons.add(cmdOK);

        cmdCancel.setText(I18N.getString("de.cismet.cismap.commons.featureservice.style.FontChooserDialog.cmdCancel.text")); // NOI18N
        cmdCancel.setMaximumSize(new java.awt.Dimension(90, 23));
        cmdCancel.setMinimumSize(new java.awt.Dimension(90, 23));
        cmdCancel.setPreferredSize(new java.awt.Dimension(90, 23));
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        panDialogButtons.add(cmdCancel);

        getContentPane().add(panDialogButtons, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
            
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose();
    }//GEN-LAST:event_closeDialog

    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        doClose();
    }//GEN-LAST:event_cmdOKActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        resultFont = null;
        doClose();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void lstFontSizeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstFontSizeValueChanged
        previewFont();
    }//GEN-LAST:event_lstFontSizeValueChanged

    private void lstFontNameValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstFontNameValueChanged
        previewFont();
    }//GEN-LAST:event_lstFontNameValueChanged

    private void chkBoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkBoldItemStateChanged
        previewFont();
}//GEN-LAST:event_chkBoldItemStateChanged

    private void chkItalicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkItalicItemStateChanged
        previewFont();
}//GEN-LAST:event_chkItalicItemStateChanged
    
    private void doClose() {
        setVisible(false);
        dispose();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                FontChooserDialog dialog = new FontChooserDialog(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkBold;
    private javax.swing.JCheckBox chkItalic;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblPreview;
    private javax.swing.JList lstFontName;
    private javax.swing.JList lstFontSize;
    private javax.swing.JPanel panDialogButtons;
    private javax.swing.JPanel panFontAttrib;
    private javax.swing.JPanel panPreview;
    private javax.swing.JPanel panPreviewLabel;
    private javax.swing.JScrollPane scrFontName;
    private javax.swing.JScrollPane scrFontSize;
    private javax.swing.JScrollPane scrPreview;
    // End of variables declaration//GEN-END:variables
}
