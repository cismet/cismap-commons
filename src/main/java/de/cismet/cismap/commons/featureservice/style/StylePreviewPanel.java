/*
 * StylePreviewPanel.java
 *
 * Created on 25. Februar 2008, 14:31
 */
package de.cismet.cismap.commons.featureservice.style;

import de.cismet.cismap.commons.gui.piccolo.FeatureAnnotationSymbol;
import de.cismet.tools.gui.PointSymbolCreator;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.border.BevelBorder;

/**
 *
 * @author  nh
 */
public class StylePreviewPanel extends JPanel {
    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    private static final String SAMPLE_TEXT = "Identifier";
    private boolean drawLine = false;
    private boolean drawFill = false;
    private boolean drawText = false;
    private int symbolSize = 5;
    private int lineWidth = 0;
    private float alpha = 1.0f;
    private Color lineColor = Color.BLUE;
    private Color fillColor = Color.RED;
    private Color fontColor = Color.BLACK;
    private Font fontType = null;
    private Image pointSymbol = null;

    /**
     * Creates new form StylePreviewPanel
     */
    public StylePreviewPanel() {
        initComponents();
        setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        log.debug("Erstelle StylePreviewPanel");
    }

    /**
     * Setzt die Attribute des PreviewPanels neu und stößt ein erneutes Zeichnen an.
     * @param drawLine true, wenn Linie gezeichnet werden soll
     * @param drawFill true, wenn Füllung gezeichnet werden soll
     * @param drawText true, wenn Labels gezeichnet werden sollen
     * @param pointSymbol FeatureAnnotationSymbol oder null für eigenes Symbol
     * @param symbolSize -1 oder Größe des eigenen Symbols
     * @param lineWidth Dicke der Linie
     * @param alpha AlphaWert des zu zeichnenden Polygons
     * @param lc LinieFarbe
     * @param fc Füllfarbe
     * @param font Labelschriftart
     * @param foc Labelschriftfarbe
     */
    public void update(boolean drawLine, boolean drawFill, boolean drawText,
            FeatureAnnotationSymbol pointSymbol, int symbolSize, int lineWidth,
            float alpha, Color lc, Color fc, Font font, Color foc) {
        this.drawLine = drawLine;
        this.drawFill = drawFill;
        this.drawText = drawText;
        this.symbolSize = symbolSize;
        this.lineWidth = lineWidth;
        this.alpha = alpha;
        if (drawLine) this.lineColor = new Color(lc.getRed(), lc.getGreen(), lc.getBlue());
        if (drawFill) this.fillColor = new Color(fc.getRed(), fc.getGreen(), fc.getBlue());
        this.fontColor = foc;
        this.fontType = font;
        this.pointSymbol = (pointSymbol == null ? createPointSymbol() : pointSymbol.getImage());
        repaint();
    }

    public Image getPointSymbol() {
        return pointSymbol;
    }

    /**
     * Erstellt das Punktsymbol als Image aus den übergebenen Parametern.
     */
    private BufferedImage createPointSymbol() {
        return PointSymbolCreator.createPointSymbol(drawLine, drawFill, symbolSize, lineWidth, fillColor, lineColor);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, alpha));
        int[] pointsX = {10, getWidth()-50, getWidth()-10, 40};
        int[] pointsY = {getHeight()/3, 10, getHeight()/2, getHeight()-20};

        // Füllung
        if (drawFill) {
            g2d.setColor(fillColor);
            g2d.fillPolygon(pointsX, pointsY, 4);
        }

        // Linie
        if (drawLine) {
            g2d.setColor(lineColor);
            g2d.setStroke(new BasicStroke(lineWidth, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
            g2d.drawPolygon(pointsX, pointsY, 4);
        }

        // Text
        if (drawText) {
            g2d.setColor(fontColor);
            g2d.setFont(fontType);
            g2d.drawString(SAMPLE_TEXT, getWidth()/3, getHeight()/2);
        }

        // Pointsymbol
        g2d.drawImage(pointSymbol, getWidth() - pointSymbol.getWidth(null) / 2 - 40,
                getHeight() - pointSymbol.getWidth(null) / 2 - 20, null);

        g2d.dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(50, 50));
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
