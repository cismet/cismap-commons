/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/*
 * AddHandleDialog.java
 *
 * Created on 05.11.2009, 15:38:03
 */
package de.cismet.cismap.commons.gui.piccolo;

import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class AddHandleDialog extends javax.swing.JDialog {

    //~ Static fields/initializers ---------------------------------------------

    public static final int STATUS_NONE = -1;
    public static final int STATUS_OK = 0;
    public static final int STATUS_CANCELED = 1;

    private static final double PRECISION = 100; // => "1/PRECISION"

    //~ Instance fields --------------------------------------------------------

    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());

    private int returnStatus = STATUS_NONE;

    private boolean sliderLocked = false;
    private boolean updateLeftLocked = false;
    private boolean updateRightLocked = false;

    private double distanceToLeft = 0d;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblDescriptionImage;
    private javax.swing.JLabel lblDistanceLeft;
    private javax.swing.JLabel lblLeftNeighbour;
    private javax.swing.JLabel lblLeftPoint;
    private javax.swing.JLabel lblLeftSpacer;
    private javax.swing.JLabel lblNew;
    private javax.swing.JLabel lblNewPoint;
    private javax.swing.JLabel lblRightDistance;
    private javax.swing.JLabel lblRightNeighbour;
    private javax.swing.JLabel lblRightPoint;
    private javax.swing.JLabel lblRightSpacer;
    private javax.swing.JLabel lblTopLeftSpacer;
    private javax.swing.JLabel lblTopRightSpacer;
    private javax.swing.JPanel panButtons;
    private javax.swing.JPanel panFooter;
    private javax.swing.JSlider sliDistance;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form AddHandleDialog.
     *
     * @param  parent         DOCUMENT ME!
     * @param  modal          DOCUMENT ME!
     * @param  distanceTotal  DOCUMENT ME!
     */
    public AddHandleDialog(final java.awt.Frame parent, final boolean modal, final double distanceTotal) {
        super(parent, modal);

        initComponents();
        getRootPane().setDefaultButton(btnOK);

        setDistanceTotal(distanceTotal);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblNew = new javax.swing.JLabel();
        sliDistance = new javax.swing.JSlider();
        lblLeftNeighbour = new javax.swing.JLabel();
        lblRightNeighbour = new javax.swing.JLabel();
        lblDistanceLeft = new javax.swing.JLabel();
        lblRightDistance = new javax.swing.JLabel();
        lblLeftPoint = new javax.swing.JLabel();
        lblRightPoint = new javax.swing.JLabel();
        lblNewPoint = new javax.swing.JLabel();
        panFooter = new javax.swing.JPanel();
        lblDescriptionImage = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        panButtons = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblLeftSpacer = new javax.swing.JLabel();
        lblTopLeftSpacer = new javax.swing.JLabel();
        lblRightSpacer = new javax.swing.JLabel();
        lblTopRightSpacer = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(AddHandleDialog.class, "AddHandleDialog.title")); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lblNew.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNew.setText(org.openide.util.NbBundle.getMessage(AddHandleDialog.class, "AddHandleDialog.lblNew.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblNew, gridBagConstraints);

        sliDistance.setMajorTickSpacing((int)PRECISION);
        sliDistance.setPaintTicks(true);
        sliDistance.setValue(0);
        sliDistance.addChangeListener(new javax.swing.event.ChangeListener() {

                @Override
                public void stateChanged(final javax.swing.event.ChangeEvent evt) {
                    sliDistanceStateChanged(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(sliDistance, gridBagConstraints);

        lblLeftNeighbour.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLeftNeighbour.setText(org.openide.util.NbBundle.getMessage(
                AddHandleDialog.class,
                "AddHandleDialog.lblLeftNeighbour.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblLeftNeighbour, gridBagConstraints);

        lblRightNeighbour.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRightNeighbour.setText(org.openide.util.NbBundle.getMessage(
                AddHandleDialog.class,
                "AddHandleDialog.lblRightNeighbour.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblRightNeighbour, gridBagConstraints);

        lblDistanceLeft.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDistanceLeft.setText(org.openide.util.NbBundle.getMessage(
                AddHandleDialog.class,
                "AddHandleDialog.lblDistanceLeft.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblDistanceLeft, gridBagConstraints);

        lblRightDistance.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblRightDistance.setText(org.openide.util.NbBundle.getMessage(
                AddHandleDialog.class,
                "AddHandleDialog.lblDistanceRight.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblRightDistance, gridBagConstraints);

        lblLeftPoint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLeftPoint.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cismap/commons/gui/piccolo/neighbourPoint.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblLeftPoint, gridBagConstraints);

        lblRightPoint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRightPoint.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cismap/commons/gui/piccolo/neighbourPoint.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblRightPoint, gridBagConstraints);

        lblNewPoint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNewPoint.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cismap/commons/gui/piccolo/newPoint.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblNewPoint, gridBagConstraints);

        panFooter.setLayout(new java.awt.GridBagLayout());

        lblDescriptionImage.setText(org.openide.util.NbBundle.getMessage(
                AddHandleDialog.class,
                "AddHandleDialog.lblDescriptionImage.text")); // NOI18N
        lblDescriptionImage.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lblDescriptionImage.setPreferredSize(new java.awt.Dimension(250, 120));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFooter.add(lblDescriptionImage, gridBagConstraints);

        lblDescription.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cismap/commons/gui/piccolo/addHandle.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFooter.add(lblDescription, gridBagConstraints);

        btnOK.setText(org.openide.util.NbBundle.getMessage(AddHandleDialog.class, "AddHandleDialog.btnOK.text")); // NOI18N
        btnOK.setPreferredSize(new java.awt.Dimension(80, 29));
        btnOK.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnOKActionPerformed(evt);
                }
            });
        panButtons.add(btnOK);

        btnCancel.setText(org.openide.util.NbBundle.getMessage(
                AddHandleDialog.class,
                "AddHandleDialog.btnCancel.text")); // NOI18N
        btnCancel.setPreferredSize(new java.awt.Dimension(80, 29));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnCancelActionPerformed(evt);
                }
            });
        panButtons.add(btnCancel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        panFooter.add(panButtons, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(panFooter, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.38;
        getContentPane().add(lblLeftSpacer, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(lblTopLeftSpacer, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.38;
        getContentPane().add(lblRightSpacer, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(lblTopRightSpacer, gridBagConstraints);

        jSpinner1.setValue(getDistanceToLeft());
        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(
                Double.valueOf(0.0d),
                Double.valueOf(0.0d),
                null,
                Double.valueOf(1.0d)));
        jSpinner1.setMinimumSize(new java.awt.Dimension(75, 26));
        jSpinner1.setPreferredSize(new java.awt.Dimension(75, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(jSpinner1, gridBagConstraints);
        ((JSpinner.DefaultEditor)jSpinner1.getEditor()).getTextField()
                .getDocument()
                .addDocumentListener(new LeftDocumentListener());

        jSpinner2.setValue(getDistanceToRight());
        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(
                Double.valueOf(0.0d),
                Double.valueOf(0.0d),
                null,
                Double.valueOf(1.0d)));
        jSpinner2.setMinimumSize(new java.awt.Dimension(75, 26));
        jSpinner2.setPreferredSize(new java.awt.Dimension(75, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(jSpinner2, gridBagConstraints);
        ((JSpinner.DefaultEditor)jSpinner2.getEditor()).getTextField()
                .getDocument()
                .addDocumentListener(new RightDocumentListener());

        pack();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnOKActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnOKActionPerformed
        returnStatus = STATUS_OK;
        dispose();
    }                                                                         //GEN-LAST:event_btnOKActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnCancelActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnCancelActionPerformed
        returnStatus = STATUS_CANCELED;
        dispose();
    }                                                                             //GEN-LAST:event_btnCancelActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void sliDistanceStateChanged(final javax.swing.event.ChangeEvent evt) { //GEN-FIRST:event_sliDistanceStateChanged
        sliderValueChanged();
    }                                                                               //GEN-LAST:event_sliDistanceStateChanged

    /**
     * DOCUMENT ME!
     *
     * @param   value  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private double cut(final double value) {
        return (int)(value * PRECISION) / PRECISION;
    }

    /**
     * DOCUMENT ME!
     */
    private void sliderValueChanged() {
        // update für den Slider kurzfristig deaktivieren (sonst endlos-Schleife)
        sliderLocked = true;
        try {
            setDistanceToLeft(sliDistance.getValue() / PRECISION);
        } finally {
            // update für den Slider wieder aktivieren
            sliderLocked = false;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param  distanceToLeft  DOCUMENT ME!
     */
    public void setDistanceToLeft(final double distanceToLeft) {
        this.distanceToLeft = cut(distanceToLeft);

        if (!sliderLocked) {      // Endlos-Schleife vermeiden
            sliDistance.setValue((int)(this.distanceToLeft * PRECISION));
        }
        if (!updateLeftLocked) {  // Endlos-Schleife vermeiden
            jSpinner1.setValue(this.distanceToLeft);
        }
        if (!updateRightLocked) { // Endlos-Schleife vermeiden
            jSpinner2.setValue(cut(getDistanceTotal() - this.distanceToLeft));
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param  distanceToRight  DOCUMENT ME!
     */
    public void setDistanceToRight(final double distanceToRight) {
        setDistanceToLeft(getDistanceTotal() - distanceToRight);
    }

    /**
     * DOCUMENT ME!
     */
    private void leftTextChanged() {
        // update für das linke Feld kurzfristig deaktivieren (sonst endlos-Schleife)
        updateLeftLocked = true;
        try {
            // Abstand vom linken Punkt anhand des linken Feldes setzen
            setDistanceToLeft((Double)jSpinner1.getValue());
        } finally {
            // update für das linke Feld wieder aktivieren
            updateLeftLocked = false;
        }
    }

    /**
     * DOCUMENT ME!
     */
    private void rightTextChanged() {
        // update für das rechte Feld kurzfristig deaktivieren (sonst endlos-Schleife)
        updateRightLocked = true;
        try {
            // Abstand vom linken Punkt anhand des Wertes im linken Feld berechnen
            setDistanceToRight((Double)jSpinner2.getValue());
        } finally {
            // update für das rechte Feld wieder aktivieren
            updateRightLocked = false;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public double getDistanceTotal() {
        return sliDistance.getMaximum() / PRECISION;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public double getDistanceToLeft() {
        return distanceToLeft;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public double getDistanceToRight() {
        return cut(getDistanceTotal() - distanceToLeft);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  distanceTotal  DOCUMENT ME!
     */
    private void setDistanceTotal(final double distanceTotal) {
        sliDistance.setMaximum((int)(distanceTotal * PRECISION));
        ((SpinnerNumberModel)jSpinner1.getModel()).setMaximum(distanceTotal);
        ((SpinnerNumberModel)jSpinner2.getModel()).setMaximum(distanceTotal);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  args  the command line arguments
     */
    public static void main(final String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    final AddHandleDialog dialog = new AddHandleDialog(new javax.swing.JFrame(), true, 23d);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                            @Override
                            public void windowClosing(final java.awt.event.WindowEvent e) {
                                System.exit(0);
                            }
                        });
                    dialog.setVisible(true);
                }
            });
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class LeftDocumentListener implements DocumentListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent e) {
            leftTextChanged();
        }

        @Override
        public void removeUpdate(final DocumentEvent e) {
            leftTextChanged();
        }

        @Override
        public void changedUpdate(final DocumentEvent e) {
            leftTextChanged();
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class RightDocumentListener implements DocumentListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent e) {
            rightTextChanged();
        }

        @Override
        public void removeUpdate(final DocumentEvent e) {
            rightTextChanged();
        }

        @Override
        public void changedUpdate(final DocumentEvent e) {
            rightTextChanged();
        }
    }
}
