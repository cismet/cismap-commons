/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 *  Copyright (C) 2011 jweintraut
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * DownloadManagerPanel.java
 *
 * Created on 27.04.2011, 13:22:46
 */
package de.cismet.cismap.commons.gui.shapeexport;

import java.awt.Component;
import org.apache.log4j.Logger;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import java.net.MalformedURLException;
import java.net.URL;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JLabel;
import javax.swing.JProgressBar;

/**
 * DOCUMENT ME!
 *
 * @author   jweintraut
 * @version  $Revision$, $Date$
 */
public class DownloadManagerPanel extends javax.swing.JPanel implements Observer {

    //~ Static fields/initializers ---------------------------------------------

    private static final Logger LOG = Logger.getLogger(DownloadManagerPanel.class);

    //~ Instance fields --------------------------------------------------------

    private int countOfCurrentDownloads = 0;
    private Map<ExportWFS, Integer> positionInGridBag = new HashMap<ExportWFS, Integer>();
    private Map<Download, ExportWFS> downloads = new HashMap<Download, ExportWFS>();
    private Map<Download, Component> components = new HashMap<Download, Component>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblDestinationFile;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblWFS;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form DownloadManagerPanel.
     */
    public DownloadManagerPanel() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblWFS = new javax.swing.JLabel();
        lblDestinationFile = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        lblWFS.setText(org.openide.util.NbBundle.getMessage(
                DownloadManagerPanel.class,
                "DownloadManagerPanel.lblWFS.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblWFS, gridBagConstraints);

        lblDestinationFile.setText(org.openide.util.NbBundle.getMessage(
                DownloadManagerPanel.class,
                "DownloadManagerPanel.lblDestinationFile.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblDestinationFile, gridBagConstraints);

        lblStatus.setText(org.openide.util.NbBundle.getMessage(
                DownloadManagerPanel.class,
                "DownloadManagerPanel.lblStatus.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblStatus, gridBagConstraints);
    }                                                    // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  wfss  downloads url DOCUMENT ME!
     */
    public void add(final Collection<ExportWFS> wfss) {
        final GridBagConstraints layoutConstraints = new GridBagConstraints();
        layoutConstraints.anchor = GridBagConstraints.WEST;
        layoutConstraints.insets = new Insets(5, 5, 5, 5);

        for (final ExportWFS wfs : wfss) {
            countOfCurrentDownloads++;
            positionInGridBag.put(wfs, new Integer(countOfCurrentDownloads));

            layoutConstraints.gridx = 0;
            layoutConstraints.gridy = countOfCurrentDownloads;
            add(new JLabel(wfs.getTitle()), layoutConstraints);

            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = countOfCurrentDownloads;
            add(new JLabel(wfs.getUrl().toString()), layoutConstraints);

            layoutConstraints.gridx = 2;
            layoutConstraints.gridy = countOfCurrentDownloads;

            final Download download = new Download(wfs.getUrl(), wfs.getQuery(), "E:\\Projekte\\Shape-Export");
            download.addObserver(this);
            downloads.put(download, wfs);
            final JProgressBar progressBar = new JProgressBar();
            progressBar.setIndeterminate(true);
            add(progressBar, layoutConstraints);
        }
    }

    @Override
    public void update(final Observable o, final Object arg) {
        if (!(o instanceof Download)) {
            return;
        }

        final Download download = (Download)o;
        final ExportWFS wfs = downloads.get(download);
        final Integer positionInLayout = positionInGridBag.get(wfs);

        switch (download.getStatus()) {
            case Download.COMPLETE: {
                LOG.fatal("Download complete");
                System.out.println("Download complete");
                final GridBagLayout layout = (GridBagLayout)getLayout();
                break;
            }
            case Download.ERROR: {
                LOG.fatal("Download failed");
                System.out.println("Download failed");
                break;
            }
        }
    }
    
    protected void removeDownloadAndRearrangeLayout(final Download download) {
        final ExportWFS wfs = downloads.get(download);
        final Integer positionInLayout = positionInGridBag.get(wfs);
        
                
    }
}
