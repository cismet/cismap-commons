package de.cismet.cismap.commons.gui.options;

import de.cismet.cismap.commons.gui.MappingComponent;
import de.cismet.cismap.commons.gui.piccolo.eventlistener.CreateSearchGeometryListener;
import de.cismet.cismap.commons.interaction.CismapBroker;
import de.cismet.lookupoptions.*;
import de.cismet.tools.configuration.NoWriteError;
import java.awt.Color;
import javax.swing.JColorChooser;
import org.jdom.Element;
import org.openide.util.lookup.ServiceProvider;

/**
 * @author jruiz
 */
@ServiceProvider(service = OptionsPanelController.class)
public class SearchOptionsPanel extends AbstractOptionsPanel implements OptionsPanelController {

    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    
    private static final String OPTION_NAME = "Suche";
    private static final String CONFIGURATION = "SearchOptionsPanel";
    private static final String CONF_HOLD_GEOMETRIES = "HoldGeometries";
    private static final String CONF_GEOMETRY_COLOR = "GeometryColor";

    private boolean stillConfigured = false;
    private boolean holdGeometries;
    private Color geometryColor;
    private CreateSearchGeometryListener listener = ((CreateSearchGeometryListener)CismapBroker.getInstance().getMappingComponent().getInputListener(MappingComponent.CREATE_SEARCH_POLYGON));

    public SearchOptionsPanel() {
        super(OPTION_NAME, CismapOptionsCategory.class);
        initComponents();
    }

    @Override
    public int getOrder() {
        return 1;
    }

    @Override
    public void update() {
        holdGeometries = listener.isHoldingGeometries();
        geometryColor = listener.getSearchColor();

        jCheckBox1.setSelected(holdGeometries);
        jPanel1.setBackground(geometryColor);
    }

    @Override
    public void applyChanges() {
        holdGeometries = jCheckBox1.isSelected();
        geometryColor = jPanel1.getBackground();

        listener.setHoldGeometries(holdGeometries);
        listener.setSearchColor(geometryColor);
    }

    @Override
    public boolean isChanged() {
        return 
                holdGeometries != jCheckBox1.isSelected() ||
                geometryColor.getRGB() != jPanel1.getBackground().getRGB();
    }

    @Override
    public String getTooltip() {
        return "";
    }

    @Override
    public void configure(Element parent) {
        if (!stillConfigured) {
            log.debug("Configure SearchOptionsPanel");
            try {
                String elementHoldGeometries = "";
                String elementGeometryColor = "";
                if (parent != null) {
                    final Element conf = parent.getChild(CONFIGURATION);
                    if (conf != null) {
                        elementHoldGeometries = conf.getChildText(CONF_HOLD_GEOMETRIES);
                        elementGeometryColor = conf.getChildText(CONF_GEOMETRY_COLOR);
                    }
                }
                holdGeometries = new Boolean(elementHoldGeometries);
                try {
                    geometryColor = new Color(Integer.valueOf(elementGeometryColor));
                } catch (NumberFormatException ex) {
                    geometryColor = Color.GREEN;
                }

           } catch (Exception ex) {
                log.error("Fehler beim Konfigurieren des SearchOptionsPanel", ex);
            }

            // hier werden die Werte in der GUI gesetzt
            jCheckBox1.setSelected(holdGeometries);
            jPanel1.setBackground(geometryColor);

            stillConfigured = true;
        } else {
            log.debug("skip Configure SearchOptionsPanel - still configured");
        }

        // Änderungen anwenden
        applyChanges();
    }

    @Override
    public Element getConfiguration() throws NoWriteError {
        Element conf = new Element(CONFIGURATION);

        Element holdSearchGeometriesElement = new Element(CONF_HOLD_GEOMETRIES);
        Element searchGeometryColorElement = new Element(CONF_GEOMETRY_COLOR);

        holdSearchGeometriesElement.addContent(Boolean.toString(holdGeometries));
        searchGeometryColorElement.addContent(String.valueOf(geometryColor.getRGB()));

        conf.addContent(holdSearchGeometriesElement);
        conf.addContent(searchGeometryColorElement);

        return conf;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        jCheckBox1.setText(org.openide.util.NbBundle.getMessage(SearchOptionsPanel.class, "SearchOptionsPanel.jCheckBox1.text")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton1.setText(org.openide.util.NbBundle.getMessage(SearchOptionsPanel.class, "SearchOptionsPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(50, 33));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 33, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel1, java.awt.BorderLayout.EAST);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(SearchOptionsPanel.class, "SearchOptionsPanel.jLabel1.text")); // NOI18N
        jPanel2.add(jLabel1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(123, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Color color = JColorChooser.showDialog(
             this,
             "Farbe der Such-Geometrien wählen.",
             getColor());
        if (color != null) {
            setColor(color);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private Color getColor() {
        return jPanel1.getBackground();
    }

    private void setColor(Color newColor) {
        log.debug("newColor: " + newColor);
        jPanel1.setBackground(newColor);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
