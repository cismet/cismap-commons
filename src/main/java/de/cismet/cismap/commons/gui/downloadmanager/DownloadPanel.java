/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * DownloadPanel.java
 *
 * Created on 18.05.2011, 17:05:07
 */
package de.cismet.cismap.commons.gui.downloadmanager;

import org.openide.util.NbBundle;

import java.awt.Color;
import java.awt.SystemColor;

import java.util.Observable;
import java.util.Observer;

import javax.swing.JOptionPane;

import de.cismet.security.exceptions.BadHttpStatusCodeException;

/**
 * A panel which represents a download. In order to visualize the different states of a Download object, each
 * DownloadPanel object registers as observer on its download.
 *
 * @author   jweintraut
 * @version  $Revision$, $Date$
 */
public class DownloadPanel extends javax.swing.JPanel implements Observer {

    //~ Instance fields --------------------------------------------------------

    private Download download;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JProgressBar prbProgress;
    private javax.swing.JSeparator sepDownloadPanels;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form DownloadPanel.
     *
     * @param  download  The Download object to visualize.
     */
    public DownloadPanel(final Download download) {
        this.download = download;
        initComponents();
        updateComponents();
        this.download.addObserver(this);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblIcon = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        sepDownloadPanels = new javax.swing.JSeparator();
        prbProgress = new javax.swing.JProgressBar();

        setMaximumSize(new java.awt.Dimension(2147483647, 53));
        addMouseListener(new java.awt.event.MouseAdapter() {

                @Override
                public void mouseClicked(final java.awt.event.MouseEvent evt) {
                    formMouseClicked(evt);
                }
            });
        setLayout(new java.awt.GridBagLayout());

        lblIcon.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cismap/commons/gui/res/download.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblIcon, gridBagConstraints);

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTitle.setText(download.getTitle());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblTitle, gridBagConstraints);

        lblMessage.setBackground(new java.awt.Color(255, 102, 0));
        lblMessage.setMaximumSize(new java.awt.Dimension(32767, 15));
        lblMessage.setMinimumSize(new java.awt.Dimension(10, 15));
        lblMessage.setPreferredSize(new java.awt.Dimension(8, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblMessage, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(sepDownloadPanels, gridBagConstraints);

        prbProgress.setBorderPainted(false);
        prbProgress.setIndeterminate(true);
        prbProgress.setMaximumSize(new java.awt.Dimension(32767, 15));
        prbProgress.setMinimumSize(new java.awt.Dimension(10, 15));
        prbProgress.setPreferredSize(new java.awt.Dimension(146, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(prbProgress, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * Opens a message dialog if the downloads is erraneous and the user double-clicked the panel.
     *
     * @param  evt  The event object.
     */
    private void formMouseClicked(final java.awt.event.MouseEvent evt) { //GEN-FIRST:event_formMouseClicked
        if ((evt.getClickCount() > 1) && (download.getCaughtException() != null)) {
            JOptionPane.showMessageDialog(
                this,
                download.getCaughtException().getMessage(),
                NbBundle.getMessage(DownloadPanel.class, "DownloadPanel.formMouseClicked.error.title"),
                JOptionPane.ERROR_MESSAGE);
        }
    }                                                                    //GEN-LAST:event_formMouseClicked

    @Override
    public void update(final Observable o, final Object arg) {
        if ((o == null) || !(o.equals(download))) {
            return;
        }

        updateComponents();

        revalidate();
        repaint();
    }

    /**
     * Modifies the components in order to visualize the current state of this panel's download.
     */
    private void updateComponents() {
        switch (download.getStatus()) {
            case Download.RUNNING: {
                prbProgress.setVisible(true);
                lblMessage.setVisible(false);
                lblTitle.setForeground(SystemColor.textText);
                break;
            }
            case Download.COMPLETED: {
                prbProgress.setVisible(false);
                lblMessage.setVisible(true);
                lblTitle.setForeground(SystemColor.textInactiveText);
                lblMessage.setForeground(SystemColor.textInactiveText);
                lblMessage.setText(download.getFileToSaveTo().getAbsolutePath());
                break;
            }
            case Download.ERROR: {
                prbProgress.setVisible(false);
                lblMessage.setVisible(true);
                lblMessage.setForeground(Color.red);
                if (download.getCaughtException() instanceof BadHttpStatusCodeException) {
                    final BadHttpStatusCodeException exception = (BadHttpStatusCodeException)
                        download.getCaughtException();
                    if (exception.getHttpStatuscode() == 204) {
                        lblMessage.setText(NbBundle.getMessage(
                                DownloadPanel.class,
                                "DownloadPanel.lblMessage.noData",
                                download.getTitle()));
                    } else {
                        lblMessage.setText(NbBundle.getMessage(DownloadPanel.class, "DownloadPanel.lblMessage.error"));
                    }
                } else {
                    lblMessage.setText(NbBundle.getMessage(DownloadPanel.class, "DownloadPanel.lblMessage.error"));
                }
                setBackground(Color.pink);
                break;
            }
        }
    }
}
