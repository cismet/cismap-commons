/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 *  Copyright (C) 2010 thorsten
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY_SERVER WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * TestFeatureInfoDisplay.java
 *
 * Created on 30.12.2010, 22:53:37
 */
package de.cismet.cismap.commons.gui.featureinfowidget.displays;

import org.jdesktop.swingx.graphics.GraphicsUtilities;

import org.openide.util.lookup.ServiceProvider;

import java.awt.image.BufferedImage;

import java.net.URL;

import javax.swing.ImageIcon;
import javax.swing.JTabbedPane;
import javax.swing.SwingWorker;

import de.cismet.cismap.commons.gui.featureinfowidget.AbstractFeatureInfoDisplay;
import de.cismet.cismap.commons.gui.featureinfowidget.FeatureInfoDisplay;
import de.cismet.cismap.commons.gui.featureinfowidget.FeatureInfoDisplayKey;
import de.cismet.cismap.commons.interaction.events.MapClickedEvent;
import de.cismet.cismap.commons.raster.wms.SlidableWMSServiceLayerGroup;

/**
 * DOCUMENT ME!
 *
 * @author   thorsten
 * @version  $Revision$, $Date$
 */
@ServiceProvider(service = FeatureInfoDisplay.class)
public class TestFeatureInfoDisplay extends AbstractFeatureInfoDisplay {

    //~ Instance fields --------------------------------------------------------

    private final transient org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form TestFeatureInfoDisplay.
     */
    public TestFeatureInfoDisplay() {
        super(new FeatureInfoDisplayKey(
                SlidableWMSServiceLayerGroup.class,
                "testserver",
                FeatureInfoDisplayKey.ANY_SERVER));
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(org.openide.util.NbBundle.getMessage(
                TestFeatureInfoDisplay.class,
                "TestFeatureInfoDisplay.jLabel1.text")); // NOI18N
        add(jLabel1, java.awt.BorderLayout.CENTER);
    }                                                    // </editor-fold>//GEN-END:initComponents

    @Override
    public void init(final Object layer, final JTabbedPane parentTabbedPane) {
        System.out.println("bla");
    }

    @Override
    public void showFeatureInfo(final MapClickedEvent mce) {
        final String url = "http://maps.google.com/maps/api/staticmap?center=Europe&zoom=3&size=" + jLabel1.getWidth()
                    + "x" + jLabel1.getHeight() + "&maptype=hybrid&markers=color:blue|label:XXX|"
                    + mce.getyCoord() + ","
                    + mce.getxCoord() + "&sensor=false";
        log.fatal(url);
        jLabel1.setIcon(null);
        jLabel1.setText("...");
        new SwingWorker<BufferedImage, Void>() {

                @Override
                protected BufferedImage doInBackground() throws Exception {
                    return GraphicsUtilities.loadCompatibleImage(new URL(url));
                }

                @Override
                protected void done() {
                    try {
                        final BufferedImage result = get();
                        jLabel1.setText("");
                        jLabel1.setIcon(new ImageIcon(result));
                    } catch (Exception e) {
                        log.error("Exception in Background Thread", e);
                        jLabel1.setIcon(null);
                        jLabel1.setText("Error");
                    }
                }
            }.execute();
    }

    @Override
    public FeatureInfoDisplay createCopy() {
        final TestFeatureInfoDisplay newInstance = new TestFeatureInfoDisplay();
        return newInstance;
    }
}
