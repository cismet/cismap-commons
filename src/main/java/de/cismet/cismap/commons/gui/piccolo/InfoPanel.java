/*
 * InfoPanel.java
 *
 * Created on 16. August 2007, 16:56
 */
package de.cismet.cismap.commons.gui.piccolo;

import edu.umd.cs.piccolo.PNode;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JPanel;
import pswing.PSwing;

/**
 *
 * @author  hell
 */
public class InfoPanel extends JPanel {

    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    private ImageIcon icoMore = new ImageIcon(getClass().getResource("/de/cismet/cismap/commons/gui/res/more.png"));
    private ImageIcon icoShrink = new ImageIcon(getClass().getResource("/de/cismet/cismap/commons/gui/res/shrink.png"));
    private PFeature pfeature;
    private PNode pNodeParent;
    private PSwing pSwing;
    private JComponent more;

    /** Creates new form InfoPanel */
    public InfoPanel(JComponent more) {
        super();
        try {
            initComponents();
            cmdMore.setIcon(icoMore);
            cmdMore.setText("");
            this.more = more;
            if (more == null) {
                //cmdMore.setVisible(false); //macht die Komponente zu klein
                cmdMore.setEnabled(false);
            } else {
                this.add(more, BorderLayout.CENTER);
                more.setVisible(false);
                more.addComponentListener(new ComponentListener() {

                    public void componentHidden(ComponentEvent e) {
                    }

                    public void componentMoved(ComponentEvent e) {
                    }

                    public void componentResized(ComponentEvent e) {
                        Thread t = new Thread(new Runnable() {

                            public void run() {
                                revalidate();
                            }
                        });
                        t.start();
                        pSwing.reshape();
                    //pNodeParent.repaint();
                    //pfeature.ensureFullVisibility();
                    }

                    public void componentShown(ComponentEvent e) {
                    }
                });
            }
        } catch (Throwable t) {
            log.error("Fehler im InfoPanel");
        }
    //scptest.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cmdMore = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setBackground(java.awt.Color.lightGray);
        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 4, 1, 4));
        setOpaque(false);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(83, 42));
        jPanel1.setOpaque(false);
        lblTitle.setBackground(javax.swing.UIManager.getDefaults().getColor("Nb.Desktop.background"));
        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblTitle.setText("jLabel1");
        lblTitle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblTitleMouseClicked(evt);
            }
        });

        jPanel1.add(lblTitle, java.awt.BorderLayout.CENTER);

        jPanel2.setOpaque(false);
        cmdMore.setText(" ");
        cmdMore.setBorderPainted(false);
        cmdMore.setFocusPainted(false);
        cmdMore.setOpaque(false);
        cmdMore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdMoreActionPerformed(evt);
            }
        });

        jPanel2.add(cmdMore);

        jPanel1.add(jPanel2, java.awt.BorderLayout.LINE_END);

        add(jPanel1, java.awt.BorderLayout.NORTH);

    }// </editor-fold>//GEN-END:initComponents
    private void lblTitleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTitleMouseClicked
        cmdMoreActionPerformed(null);
    }//GEN-LAST:event_lblTitleMouseClicked

    private void cmdMoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdMoreActionPerformed
        setExpanded(!isExpanded());
    }//GEN-LAST:event_cmdMoreActionPerformed

    public boolean isExpanded() {
        return more != null && more.isVisible();
    }

    public void setExpanded(boolean expanded) {
        setExpanded(expanded, true);
    }

    public void setExpanded(boolean expanded, boolean rescale) {
        if (more != null) {
            more.setVisible(expanded);

            revalidate();

            if (more.isVisible()) {
                cmdMore.setIcon(icoShrink);
            } else {
                cmdMore.setIcon(icoMore);
            }
            pSwing.reshape();
            if (rescale) {
                pfeature.ensureFullVisibility();
            }
        }
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Color myGrey = new Color(210, 210, 210);
        g.setColor(myGrey);
        g.fillRoundRect(2, 1, getWidth() - 4, getHeight() - 2, 10, 10);
        if (pNodeParent != null) {
            pNodeParent.setWidth(this.getWidth());
            pNodeParent.setHeight(this.getHeight());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdMore;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables
// <editor-fold defaultstate="collapsed" desc="Setters & Getters">
    public void setTitleText(String text) {
        lblTitle.setText(text);
    }

    public void setTitleIcon(Icon icon) {
        lblTitle.setIcon(icon);
    }

    public PFeature getPfeature() {
        return pfeature;
    }

    public void setPfeature(PFeature pfeature) {
        this.pfeature = pfeature;
    }

    public PNode getPNodeParent() {
        return pNodeParent;
    }

    public void setPNodeParent(PNode pNodeParent) {
        this.pNodeParent = pNodeParent;
    }

    public PSwing getPSwing() {
        return pSwing;
    }

    public void setPSwing(PSwing pSwing) {
        this.pSwing = pSwing;
    }
// </editor-fold>
}
