/*
 * StatusBar.java
 *
 * Created on 23. Mï¿½rz 2006, 14:23
 */

package de.cismet.cismap.commons.gui.statusbar;

import de.cismet.cismap.commons.features.DefaultStyledFeature;
import de.cismet.cismap.commons.features.DefaultWFSFeature;
import de.cismet.cismap.commons.features.Feature;
import de.cismet.cismap.commons.features.FeatureCollectionEvent;
import de.cismet.cismap.commons.features.FeatureCollectionListener;
import de.cismet.cismap.commons.features.StyledFeature;
import de.cismet.cismap.commons.features.XStyledFeature;
import de.cismet.cismap.commons.featureservice.DefaultFeatureServiceFeature;
import de.cismet.cismap.commons.gui.MappingComponent;
import de.cismet.cismap.commons.gui.piccolo.PFeature;
import de.cismet.cismap.commons.gui.printing.Scale;
import de.cismet.cismap.commons.interaction.CismapBroker;
import de.cismet.cismap.commons.interaction.StatusListener;
import de.cismet.cismap.commons.interaction.events.StatusEvent;
import de.cismet.tools.StaticDecimalTools;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collection;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;

/**
 *
 * @author  thorsten.hell@cismet.de
 */
public class StatusBar extends javax.swing.JPanel implements StatusListener,FeatureCollectionListener{
    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    String mode;
    ImageIcon defaultIcon=new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cismap/commons/gui/res/map.png"));
    MappingComponent mappingComponent;
    /** Creates new form StatusBar */
    public StatusBar(MappingComponent mappingComponent) {
        initComponents();
        this.mappingComponent=mappingComponent;
        lblStatusImage.setText("");
        lblCoordinates.setText("");
        lblStatusImage.setIcon(defaultIcon);
    }

    public void addScalePopups() {
        for (Scale s:mappingComponent.getScales()) {
            if (s.getDenominator()>0) {
                addScalePopupMenu(s.getText(),s.getDenominator());    
            }
        }
    }
    
    public void statusValueChanged(StatusEvent e) {
//        lblStatus.setText("");
//        lblStatusImage.setIcon(defaultIcon);
        
        if (e.getName().equals(e.COORDINATE_STRING)) {
            lblCoordinates.setText(e.getValue().toString());
        }
        else if (e.getName().equals(e.MEASUREMENT_INFOS)) {
            lblStatus.setText(e.getValue().toString());
        }
        else if (e.getName().equals(e.MAPPING_MODE)) {
            lblStatus.setText("");
            mode=((String)e.getValue());
        }
        else if (e.getName().equals(e.OBJECT_INFOS)) {
            if (e.getValue()!=null && e.getValue() instanceof PFeature &&((PFeature)e.getValue()).getFeature() !=null && ((PFeature)e.getValue()).getFeature() instanceof XStyledFeature) {
                lblStatus.setText(((XStyledFeature)((PFeature)e.getValue()).getFeature()).getName());
                ImageIcon ico=((XStyledFeature)((PFeature)e.getValue()).getFeature()).getIconImage();
                if (ico!=null&& ico.getIconWidth()>0 && ico.getIconHeight()>0) {
                    lblStatusImage.setIcon(ico);
                }
                else {
                    lblStatusImage.setIcon(defaultIcon);
                }
            } else if(e.getValue()!=null && e.getValue() instanceof PFeature &&((PFeature)e.getValue()).getFeature() !=null && ((PFeature)e.getValue()).getFeature() instanceof DefaultWFSFeature){
                if(((DefaultWFSFeature)((PFeature)e.getValue()).getFeature()).getSecondaryAnnotation() != null){
                    lblStatus.setText(((DefaultWFSFeature)((PFeature)e.getValue()).getFeature()).getSecondaryAnnotation());
                } else {
                    lblStatus.setText("");
                }
            }
            else {
                lblStatus.setText("");
                lblStatusImage.setIcon(defaultIcon);
            }
        }
        else if (e.getName().equals(e.SCALE)) {
            int sd=(int)(mappingComponent.getScaleDenominator()+0.5);
            lblScale.setText("1:"+sd);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSeparator1 = new javax.swing.JSeparator();
        pomScale = new javax.swing.JPopupMenu();
        lblCoordinates = new javax.swing.JLabel();
        lblStatusImage = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lblStatus = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        lblScale = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        lblMeasurement = new javax.swing.JLabel();

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        setLayout(new java.awt.GridBagLayout());

        lblCoordinates.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCoordinates.setText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(lblCoordinates, gridBagConstraints);

        lblStatusImage.setText(null);
        lblStatusImage.setMaximumSize(new java.awt.Dimension(17, 17));
        lblStatusImage.setMinimumSize(new java.awt.Dimension(17, 17));
        lblStatusImage.setPreferredSize(new java.awt.Dimension(17, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lblStatusImage, gridBagConstraints);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(jSeparator2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(lblStatus, gridBagConstraints);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(jSeparator3, gridBagConstraints);

        lblScale.setComponentPopupMenu(pomScale);
        lblScale.setText(null);
        lblScale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblScaleMousePressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        add(lblScale, gridBagConstraints);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(jSeparator4, gridBagConstraints);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/cismet/cismap/commons/GuiBundle"); // NOI18N
        lblMeasurement.setText(bundle.getString("StatusBar.lblMeasurement.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        add(lblMeasurement, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void lblScaleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblScaleMousePressed
        if (evt.isPopupTrigger()) {
            pomScale.setVisible(true);
        }
    }//GEN-LAST:event_lblScaleMousePressed

    private void addScalePopupMenu(String text,final double scaleDenominator) {
        JMenuItem jmi=new JMenuItem(text);
        jmi.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                mappingComponent.gotoBoundingBoxWithHistory(mappingComponent.getBoundingBoxFromScale(scaleDenominator));
            }
        });
        pomScale.add(jmi);
    }
    
    
    private  void refreshMeasurementsInStatus() {
        try{
        Collection<Feature> cf=CismapBroker.getInstance().getMappingComponent().getFeatureCollection().getSelectedFeatures();
        refreshMeasurementsInStatus(cf);
        }catch(NullPointerException ex){
            log.error("Error while refreshing measurements",ex);
        }
    }
    
    private  void refreshMeasurementsInStatus(Collection<Feature> cf) {
        double umfang=0.0;
        double area=0.0;
        for (Feature f: cf) {
            if (f!=null && f.getGeometry() !=null) {
                area+=f.getGeometry().getArea();
                umfang+=f.getGeometry().getLength();
            }
        }
        if ((area==0.0 && umfang==0.0)||cf.size()==0){
            lblMeasurement.setText("");
        } else {
            lblMeasurement.setText("Fl\u00E4che: "+StaticDecimalTools.round(area)+ "  Umfang: "+StaticDecimalTools.round(umfang));
        }
        
    }

    public void featuresRemoved(FeatureCollectionEvent fce) {
        
    }
    
    public void featuresChanged(FeatureCollectionEvent fce) {
        log.debug("FeatureChanged");
        if (CismapBroker.getInstance().getMappingComponent().getInteractionMode()==MappingComponent.NEW_POLYGON) {
            refreshMeasurementsInStatus(fce.getEventFeatures());
        }
        else {
            refreshMeasurementsInStatus();
        }
    }
    
    public void featuresAdded(FeatureCollectionEvent fce) {
        
    }
    
    public void featureSelectionChanged(FeatureCollectionEvent fce) {
         refreshMeasurementsInStatus();
    }

    public void featureReconsiderationRequested(FeatureCollectionEvent fce) {
    }

    public void allFeaturesRemoved(FeatureCollectionEvent fce) {
    }

    public javax.swing.JPopupMenu getPomScale() {
        return pomScale;
    }

    public void featureCollectionChanged() {
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lblCoordinates;
    private javax.swing.JLabel lblMeasurement;
    private javax.swing.JLabel lblScale;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatusImage;
    private javax.swing.JPopupMenu pomScale;
    // End of variables declaration//GEN-END:variables
    
    
    
}
