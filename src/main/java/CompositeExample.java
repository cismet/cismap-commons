/* * CompositeExample.java * Copyright (C) 2005 by: * *---------------------------- * cismet GmbH * Goebenstrasse 40 * 66117 Saarbruecken * http://www.cismet.de *---------------------------- * * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * General Public License for more details. * * You should have received a copy of the GNU General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *---------------------------- * Author: * thorsten.hell@cismet.de *---------------------------- * * Created on 18. Mai 2006, 12:25 * */import java.awt.Color;import edu.umd.cs.piccolo.PCanvas;import edu.umd.cs.piccolo.nodes.PPath;import edu.umd.cs.piccolox.PFrame;import edu.umd.cs.piccolox.nodes.PComposite;import java.awt.geom.GeneralPath;/** * This example shows how to create a composite node. A composite node is * a group of nodes that behave as a single node when interacted with. */public class CompositeExample extends PFrame {	public CompositeExample() {		this(null);	}        public CompositeExample(PCanvas aCanvas) {		super("CompositeExample", false, aCanvas);	}	public void initialize() {//		PNode composite = new PNode();//                //		PNode circle = PPath.createEllipse(0, 0, 100, 100);//		PNode rectangle = PPath.createRectangle(50, 50, 100, 100);//		PNode text = new PText("Hello world!");//		//		composite.addChild(circle);//		composite.addChild(rectangle);//		composite.addChild(text);//                circle.translate(20.0,50.0);//		rectangle.rotate(Math.toRadians(45));//		rectangle.setPaint(Color.RED);////		text.scale(2.0);//		text.setPaint(Color.GREEN);//                composite.setPaint(Color.green);//                composite.setBounds(10,10,100,100);//                   //		getCanvas().getLayer().addChild(composite);//		getCanvas().removeInputEventListener(getCanvas().getPanEventHandler());//		getCanvas().addInputEventListener(new PDragEventHandler());        PPath path = new PPath();               path.moveTo(100, 10);               path.lineTo(20, 10);               path.lineTo(20, 20);               path.lineTo(10, 20);               path.lineTo(10, 10);               path.moveTo(15, 15);               path.lineTo(17, 15);               path.lineTo(17, 17);               path.lineTo(15, 17);               path.lineTo(15, 15);               path.getPathReference().setWindingRule(GeneralPath.WIND_EVEN_ODD);               path.setPaint(Color.BLUE);                     getCanvas().getLayer().addChild(path);	}	public static void main(String[] args) {		new CompositeExample();	}	}