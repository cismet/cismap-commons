/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cismap.commons.featureservice;

import de.cismet.cismap.commons.features.FeatureServiceFeature;
import de.cismet.cismap.commons.featureservice.factory.FeatureFactory;
import de.cismet.cismap.commons.featureservice.factory.GMLFeatureFactory;
import java.net.URI;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.jdom.Element;

/**
 * Document FeatureService that supports GML Documents.
 *
 * @author Sebastian Puhl
 * @author Pascal Dih√©
 */
public class GMLFeatureService extends DocumentFeatureService<FeatureServiceFeature, String>
{

  public static String GML_FEATURELAYER_TYPE = "GMLFeatureServiceLayer";
  public static final HashMap<Integer, Icon> layerIcons = new HashMap<Integer, Icon>();

  static
  {
    layerIcons.put(LAYER_ENABLED_VISIBLE, new ImageIcon(AbstractFeatureService.class.getResource("/de/cismet/cismap/commons/gui/layerwidget/res/layerGml.png")));
    layerIcons.put(LAYER_ENABLED_INVISIBLE, new ImageIcon(AbstractFeatureService.class.getResource("/de/cismet/cismap/commons/gui/layerwidget/res/layerGmlInvisible.png")));
    layerIcons.put(LAYER_DISABLED_VISIBLE, new ImageIcon(AbstractFeatureService.class.getResource("/de/cismet/cismap/commons/gui/layerwidget/res/disabled/layerGml.png")));
    layerIcons.put(LAYER_DISABLED_INVISIBLE, new ImageIcon(AbstractFeatureService.class.getResource("/de/cismet/cismap/commons/gui/layerwidget/res/disabled/layerGmlInvisible.png")));
  }

  public GMLFeatureService(String name, URI documentURI, long documentSize, Vector<FeatureServiceAttribute> attributes) throws Exception
  {
    super(name, documentURI, documentSize, attributes);
  }

  protected GMLFeatureService(GMLFeatureService gfs)
  {
    super(gfs);
  }

  public GMLFeatureService(Element e) throws Exception
  {
    super(e);
  }

  @Override
  public Icon getLayerIcon(int type)
  {
    return layerIcons.get(type);
  }

  @Override
  protected LayerProperties createLayerProperties()
  {
    DefaultLayerProperties defaultLayerProperties = new DefaultLayerProperties();

    //IDs of documents can be autogenerated (faster)!
    defaultLayerProperties.setIdExpression(null, LayerProperties.EXPRESSIONTYPE_UNDEFINED);
    return defaultLayerProperties;
  }

  @Override
  protected FeatureFactory createFeatureFactory() throws Exception
  {
    return new GMLFeatureFactory(this.getLayerProperties(), this.getDocumentURI(), this.maxSupportedFeatureCount, this.layerInitWorker);
  }

  @Override
  public String getQuery()
  {
    //logger.warn("unexpected call to getQuery, not supported by this service");
    return null;
  }

  @Override
  public void setQuery(String query)
  {
    logger.warn("unexpected call to setQuery, not supported by this service:\n" + query);
  }

  @Override
  protected void initConcreteInstance() throws Exception
  {
    // nothing to do here
  }

  @Override
  public void setDocumentURI(URI documentURI)
  {
    super.setDocumentURI(documentURI);
    if(this.getFeatureFactory() != null)
    {
      ((GMLFeatureFactory)this.getFeatureFactory()).setDocumentURI(documentURI);
    }
  }

  @Override
  protected String getFeatureLayerType()
  {
    return GML_FEATURELAYER_TYPE;
  }

  @Override
  public Object clone()
  {
    logger.info("cloning service "+this.getName());
    return new GMLFeatureService(this);
  }
}
